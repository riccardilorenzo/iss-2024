/* Generated by AN DISI Unibo */ 
package it.unibo.pinger

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Pinger ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outgreen("$name -- Sono pronto!")
						emit("connected", "connected(Pinger)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="play",cond=whenEvent("start"))
				}	 
				state("play") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("start(N)"), Term.createTerm("start(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
								 	   
								forward("ping", "ping(0)" ,"ponger" ) 
								updateResourceRep( "ping(0)"  
								)
						}
						if( checkMsgContent( Term.createTerm("pong(N)"), Term.createTerm("pong(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
								 	   
								 var K = payloadArg(0).toInt() + 1  
								delay(200) 
								forward("ping", "ping($K)" ,"ponger" ) 
								updateResourceRep( "ping(${K})"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="play",cond=whenDispatch("pong"))
					transition(edgeName="t12",targetState="endgame",cond=whenEvent("end"))
				}	 
				state("endgame") { //this:State
					action { //it:State
						CommUtils.outgreen("$name -- Ho vinto!")
						//terminate(0)
						context!!.removeInternalActor(myself)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
