/* Generated by AN DISI Unibo */ 
package it.unibo.referee

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Referee ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name -- In attesa dei giocatori...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="firstplayer",cond=whenEvent("connected"))
				}	 
				state("firstplayer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("connected(N)"), Term.createTerm("connected(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("Il giocatore ${payloadArg(0)} si è connesso!")
								CommUtils.outcyan("In attesa del secondo giocatore...")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t17",targetState="play",cond=whenEvent("connected"))
				}	 
				state("play") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("connected(N)"), Term.createTerm("connected(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("Il giocatore ${payloadArg(0)} si è connesso!")
								emit("start", "start(0)" ) 
								CommUtils.outcyan("Partita iniziata!")
								observeResource("localhost","8015","ctxdef","pinger","ping")
								observeResource("localhost","8015","ctxdef","ponger","pong")
						}
						if( checkMsgContent( Term.createTerm("ping(N)"), Term.createTerm("ping(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name -- Ricevuto ping(${payloadArg(0)})")
						}
						if( checkMsgContent( Term.createTerm("pong(N)"), Term.createTerm("pong(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name -- Ricevuto pong(${payloadArg(0)})")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_play", 
				 	 					  scope, context!!, "local_tout_"+name+"_play", 3000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t28",targetState="endgame",cond=whenTimeout("local_tout_"+name+"_play"))   
					transition(edgeName="t29",targetState="play",cond=whenDispatch("ping"))
					transition(edgeName="t210",targetState="play",cond=whenDispatch("pong"))
				}	 
				state("endgame") { //this:State
					action { //it:State
						CommUtils.outcyan("Uno dei due giocatori ha perso, partita terminata!")
						emit("end", "end(0)" ) 
						delay(2000) 
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
