/* Generated by AN DISI Unibo */ 
package it.unibo.executor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Executor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name -- Creato!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleJob",cond=whenRequest("dojob"))
				}	 
				state("handleJob") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dojob(N)"), Term.createTerm("dojob(K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
								 	   
									tailrec fun fibonacciUsingTailRecursion(n: Int, a: Int = 0, b: Int = 1): Int {
									    				return if (n == 0) a else fibonacciUsingTailRecursion(n - 1, b, a + b)
													}
													
													val N = payloadArg(0)
													val R = fibonacciUsingTailRecursion(N.toInt())
								answer("dojob", "jobdone", "jobdone(${payloadArg(0)},$R)"   )  
						}
						CommUtils.outcyan("$name -- Terminating...")
						//terminate(0)
						context!!.removeInternalActor(myself)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
