/* Generated by AN DISI Unibo */ 
package it.unibo.controller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Controller ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var times = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(200) 
						CommUtils.outblue("$name | Starting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("signals(F,S)"), Term.createTerm("signals(FIRST,SELF)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												times++
												var F = false //kotlin.random.Random.nextBoolean()
											   	var S = payloadArg(1)
								if(  times >= 10  
								 ){ System.exit(0)  
								}
								CommUtils.outblue("$name | Invio $F e $S a NOR...")
								forward("signals", "signals($F,$S)" ,"nor" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="working",cond=whenDispatch("signals"))
				}	 
			}
		}
} 
